{
  "openapi": "3.0.0",
  "info": {
    "title": "Cal.com API v2",
    "description": "The Cal.com API enables programmatic access to scheduling functionalities, managed user management, organization-level operations, and more. This API is designed for developers building integrations with Cal.com, supporting both direct user access and platform-level managed accounts. All requests should be made to the base URL `https://api.cal.com`.\n\n### Authentication\nAccess to most endpoints requires authentication. Cal.com supports two primary authentication methods:\n\n1.  **API Key (Bearer Token)**: For direct user access, use an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). This is suitable for individual users and organizations that are not platform customers.\n2.  **OAuth Client Secret and Managed User Access Token**: For platform customers managing users under their OAuth client, use the `x-cal-secret-key` header with your OAuth client secret and the `x-cal-client-id` header with your OAuth client ID. For operations on behalf of a specific managed user, use their `managed_user_access_token` in the `Authorization: Bearer` header.\n\n### Versioning\nThis API uses URL path versioning (e.g., `/v2/`). Specific endpoints may also require a `cal-api-version` header for breaking changes within a major version.\n\n### Rate Limiting\nTo ensure fair usage and system stability, all API endpoints are subject to rate limits. When a rate limit is exceeded, the API will return a `429 Too Many Requests` error. The response will include `X-RateLimit-Limit`, `X-RateLimit-Remaining`, and `X-RateLimit-Reset` headers to help you manage your request volume.\n\n### Pagination\nEndpoints that return lists of resources support cursor-based pagination using `skip` and `take` (or `offset` and `limit`) query parameters. Always check the `pagination` object in the response for total items, remaining items, and page information.\n\n### Caching\nResponses for `GET` requests are generally not cached at the server level due to the dynamic nature of scheduling data. Clients should implement appropriate caching strategies if needed.",
    "version": "2.0.0",
    "contact": {
      "name": "Cal.com API Support",
      "url": "https://cal.com/docs/api-reference",
      "email": "support@cal.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.cal.com",
      "description": "Production Cal.com API server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints related to API key and OAuth token management."
    },
    {
      "name": "Managed Users",
      "description": "Endpoints for managing users under an OAuth client (Platform customers)."
    },
    {
      "name": "OAuth Clients",
      "description": "Endpoints for managing OAuth clients (Platform customers)."
    },
    {
      "name": "Webhooks",
      "description": "Endpoints for managing webhooks at the user, event type, and OAuth client levels."
    },
    {
      "name": "Organizations",
      "description": "General endpoints for organization management."
    },
    {
      "name": "Organizations / Attributes",
      "description": "Endpoints for managing custom attributes within an organization."
    },
    {
      "name": "Organizations / Attributes / Options",
      "description": "Endpoints for managing options for custom attributes and assigning them to users within an organization."
    },
    {
      "name": "Organizations / Bookings",
      "description": "Endpoints for retrieving booking information across an entire organization."
    },
    {
      "name": "Organizations / Delegation Credentials",
      "description": "Endpoints for managing delegation credentials for an organization's connected calendars."
    },
    {
      "name": "Organizations / Memberships",
      "description": "Endpoints for managing user memberships within an organization."
    },
    {
      "name": "Organizations / Routing Forms",
      "description": "Endpoints for managing routing forms at the organization level."
    },
    {
      "name": "Organizations / Routing Forms / Responses",
      "description": "Endpoints for managing responses to organization-level routing forms."
    },
    {
      "name": "Organizations / Schedules",
      "description": "Endpoints for managing schedules within an organization."
    },
    {
      "name": "Organizations / Teams",
      "description": "Endpoints for managing teams within an organization."
    },
    {
      "name": "Organizations / Teams / Bookings",
      "description": "Endpoints for retrieving booking information specific to an organization's team."
    },
    {
      "name": "Organizations / Teams / Conferencing",
      "description": "Endpoints for managing conferencing applications linked to an organization's team."
    },
    {
      "name": "Organizations / Teams / Event Types",
      "description": "Endpoints for managing event types belonging to an organization's team."
    },
    {
      "name": "Organizations / Teams / Memberships",
      "description": "Endpoints for managing user memberships within a team in an organization."
    },
    {
      "name": "Organizations / Teams / Routing Forms",
      "description": "Endpoints for managing routing forms specific to an organization's team."
    },
    {
      "name": "Organizations / Teams / Routing Forms / Responses",
      "description": "Endpoints for managing responses to team-level routing forms within an organization."
    },
    {
      "name": "Organizations / Teams / Users / Schedules",
      "description": "Endpoints for managing schedules of individual users within a team in an organization."
    },
    {
      "name": "Organizations / Teams / Verified Resources",
      "description": "Endpoints for managing verified emails and phone numbers for an organization's team."
    },
    {
      "name": "Organizations / Teams / Stripe",
      "description": "Endpoints for managing Stripe connections for an organization's team."
    },
    {
      "name": "Organizations / Users",
      "description": "Endpoints for managing users within an organization."
    },
    {
      "name": "Organizations / Users / Bookings",
      "description": "Endpoints for retrieving booking information specific to a user within an organization."
    },
    {
      "name": "Organizations / Users / OOO",
      "description": "Endpoints for managing Out-Of-Office (OOO) entries for users within an organization."
    },
    {
      "name": "Organizations / Users / Schedules",
      "description": "Endpoints for managing schedules for users within an organization."
    },
    {
      "name": "Managed Organizations",
      "description": "Endpoints for creating and managing sub-organizations under a main organization (Platform customers, Scale plan and above)."
    },
    {
      "name": "Bookings",
      "description": "Core endpoints for managing individual and recurring bookings."
    },
    {
      "name": "Calendars",
      "description": "Endpoints for connecting and managing external calendars (Google, Office365, Apple, ICS)."
    },
    {
      "name": "Conferencing",
      "description": "Endpoints for connecting and managing conferencing applications (e.g., Google Meet, Zoom)."
    },
    {
      "name": "Destination Calendars",
      "description": "Endpoints for managing specific calendars where events are created."
    },
    {
      "name": "Event Types",
      "description": "Endpoints for managing individual and team event types."
    },
    {
      "name": "Me",
      "description": "Endpoints for managing the authenticated user's profile."
    },
    {
      "name": "Routing Forms",
      "description": "Endpoints for managing routing forms."
    },
    {
      "name": "Schedules",
      "description": "Endpoints for managing personal schedules of the authenticated user."
    },
    {
      "name": "Slots",
      "description": "Endpoints for checking and reserving available time slots."
    },
    {
      "name": "Stripe",
      "description": "Endpoints for managing Stripe connections."
    },
    {
      "name": "Teams",
      "description": "General endpoints for managing personal teams of the authenticated user."
    },
    {
      "name": "Teams / Event Types",
      "description": "Endpoints for managing event types belonging to a specific team."
    },
    {
      "name": "Teams / Memberships",
      "description": "Endpoints for managing user memberships within a specific team."
    },
    {
      "name": "Teams / Verified Resources",
      "description": "Endpoints for managing verified emails and phone numbers for a specific team."
    },
    {
      "name": "Verified Resources",
      "description": "Endpoints for managing verified emails and phone numbers for the authenticated user."
    }
  ],
  "paths": {
    "/v2/oauth-clients/{clientId}/users": {
      "get": {
        "operationId": "OAuthClientUsersController_getManagedUsers",
        "summary": "Get all managed users",
        "description": "Retrieves a paginated list of managed users associated with a specific OAuth client. This endpoint is typically used by platform customers to list all users they have created and manage. Results can be filtered by email and paginated using `limit` and `offset`.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. This key is used to authenticate your OAuth client. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client. This must match the `x-cal-client-id` header if present.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `offset` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 50
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `limit` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "emails",
            "in": "query",
            "description": "Filter managed users by one or more email addresses. Provide multiple emails separated by commas (e.g., `?emails=email1@example.com,email2@example.com`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "email"
              }
            },
            "style": "form",
            "explode": false,
            "example": "email1@example.com,email2@example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of managed users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUsersOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": 101,
                          "email": "managed_user_1@example.com",
                          "username": "user1",
                          "name": "Managed User One",
                          "bio": "Bio for user one.",
                          "timeZone": "America/New_York",
                          "weekStart": "Sunday",
                          "createdDate": "2024-05-15T10:00:00.000Z",
                          "timeFormat": 24,
                          "defaultScheduleId": 123,
                          "locale": "en",
                          "avatarUrl": "https://cal.com/api/avatar/user1.png",
                          "metadata": {
                            "department": "Sales"
                          }
                        },
                        {
                          "id": 102,
                          "email": "managed_user_2@example.com",
                          "username": "user2",
                          "name": "Managed User Two",
                          "bio": null,
                          "timeZone": "Europe/London",
                          "weekStart": "Monday",
                          "createdDate": "2024-05-16T11:00:00.000Z",
                          "timeFormat": 12,
                          "defaultScheduleId": null,
                          "locale": "en",
                          "avatarUrl": null,
                          "metadata": {}
                        }
                      ],
                      "pagination": {
                        "totalItems": 5,
                        "remainingItems": 3,
                        "itemsPerPage": 2,
                        "currentPage": 1,
                        "totalPages": 3,
                        "hasNextPage": true,
                        "hasPreviousPage": false
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests allowed in the current rate limit window.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. General rate limits apply per OAuth client secret. Refer to `X-RateLimit-*` headers for details.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing user data. Clients should re-fetch data as needed."
          }
        }
      },
      "post": {
        "operationId": "OAuthClientUsersController_createUser",
        "summary": "Create a managed user",
        "description": "Creates a new user under the specified OAuth client (for platform customers). The created user will have an associated access token and refresh token, which can be used to perform actions on their behalf. You can optionally define their default timezone, which will set up their initial working hours. If a timezone is not provided, the user must set up their schedule manually before they can be booked.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client under which the user will be created.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The details for the new managed user. An `email` and `name` are mandatory.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManagedUserInput"
              },
              "examples": {
                "create_user_example": {
                  "summary": "Example request to create a managed user",
                  "value": {
                    "email": "new_managed_user@example.com",
                    "name": "New Managed User",
                    "timeZone": "Europe/Berlin",
                    "weekStart": "Monday",
                    "timeFormat": 24,
                    "locale": "en",
                    "bio": "A dedicated team member focused on client success.",
                    "metadata": {
                      "department": "Support"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Managed user successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateManagedUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example successful creation response",
                    "value": {
                      "status": "success",
                      "data": {
                        "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoib2F1dGgtY2xpZW50Iiwi...",
                        "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoib2F1dGgtY2xpZW50Iiwi...",
                        "user": {
                          "id": 103,
                          "email": "new_managed_user@example.com",
                          "username": null,
                          "name": "New Managed User",
                          "bio": "A dedicated team member focused on client success.",
                          "timeZone": "Europe/Berlin",
                          "weekStart": "Monday",
                          "createdDate": "2024-05-17T14:30:00.000Z",
                          "timeFormat": 24,
                          "defaultScheduleId": 125,
                          "locale": "en",
                          "avatarUrl": null,
                          "metadata": {
                            "department": "Support"
                          }
                        },
                        "accessTokenExpiresAt": 1700000000,
                        "refreshTokenExpiresAt": 1730000000
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "description": "Conflict. User with this email already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User with email 'new_managed_user@example.com' already exists."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. General rate limits apply per OAuth client secret. Refer to `X-RateLimit-*` headers for details.",
            "limits": [
              {
                "period": "minute",
                "requests": 30
              },
              {
                "period": "hour",
                "requests": 1800
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      }
    },
    "/v2/oauth-clients/{clientId}/users/{userId}": {
      "get": {
        "operationId": "OAuthClientUsersController_getUserById",
        "summary": "Get a managed user by ID",
        "description": "Retrieves the profile details for a specific managed user identified by their `userId` and `clientId`. This endpoint is intended for platform customers to fetch information about a managed user they control.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that manages the user.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the managed user to retrieve.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the managed user's profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 101,
                        "email": "managed_user_1@example.com",
                        "username": "user1",
                        "name": "Managed User One",
                        "bio": "Bio for user one.",
                        "timeZone": "America/New_York",
                        "weekStart": "Sunday",
                        "createdDate": "2024-05-15T10:00:00.000Z",
                        "timeFormat": 24,
                        "defaultScheduleId": 123,
                        "locale": "en",
                        "avatarUrl": "https://cal.com/api/avatar/user1.png",
                        "metadata": {
                          "department": "Sales"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing user data. Clients should re-fetch data as needed."
          }
        }
      },
      "patch": {
        "operationId": "OAuthClientUsersController_updateUser",
        "summary": "Update a managed user by ID",
        "description": "Updates the profile details for a specific managed user. This endpoint allows platform customers to modify user attributes such as name, email, timezone, and metadata. Only the fields provided in the request body will be updated.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that manages the user.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the managed user to update.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update for the managed user. All fields are optional.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagedUserInput"
              },
              "examples": {
                "update_user_example": {
                  "summary": "Example request to update a managed user's name and timezone",
                  "value": {
                    "name": "Alice M. Smith",
                    "timeZone": "America/Los_Angeles",
                    "metadata": {
                      "status": "active"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Managed user successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after update",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 101,
                        "email": "managed_user_1@example.com",
                        "username": "user1",
                        "name": "Alice M. Smith",
                        "bio": "Bio for user one.",
                        "timeZone": "America/Los_Angeles",
                        "weekStart": "Sunday",
                        "createdDate": "2024-05-15T10:00:00.000Z",
                        "timeFormat": 24,
                        "defaultScheduleId": 123,
                        "locale": "en",
                        "avatarUrl": "https://cal.com/api/avatar/user1.png",
                        "metadata": {
                          "department": "Sales",
                          "status": "active"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict. Email already in use by another user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Email 'another_user@example.com' is already in use."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 30
              },
              {
                "period": "hour",
                "requests": 1800
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Updates are never cached."
          }
        }
      },
      "delete": {
        "operationId": "OAuthClientUsersController_deleteUser",
        "summary": "Delete a managed user by ID",
        "description": "Deletes a specific managed user identified by their `userId` and `clientId`. This action is irreversible. All associated data for the user (e.g., event types, bookings) will also be deleted.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that manages the user.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the managed user to delete.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "Managed user successfully deleted. The response returns the data of the deleted user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetManagedUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after deletion",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 101,
                        "email": "managed_user_1@example.com",
                        "username": "user1",
                        "name": "Managed User One",
                        "bio": "Bio for user one.",
                        "timeZone": "America/New_York",
                        "weekStart": "Sunday",
                        "createdDate": "2024-05-15T10:00:00.000Z",
                        "timeFormat": 24,
                        "defaultScheduleId": 123,
                        "locale": "en",
                        "avatarUrl": "https://cal.com/api/avatar/user1.png",
                        "metadata": {
                          "department": "Sales"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 30
              },
              {
                "period": "hour",
                "requests": 1800
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      }
    },
    "/v2/oauth-clients/{clientId}/users/{userId}/force-refresh": {
      "post": {
        "operationId": "OAuthClientUsersController_forceRefresh",
        "summary": "Force refresh managed user tokens",
        "description": "Generates new access and refresh tokens for a specific managed user. This is useful if the existing tokens are lost or compromised. The new access token is valid for 60 minutes, and the new refresh token for 1 year. Ensure you securely store these new tokens. The response also provides `accessTokenExpiresAt` and `refreshTokenExpiresAt` as Unix timestamps.\n\n**Note**: The JWT token payload (after decoding) contains `clientId` (OAuth client ID), `ownerId` (user ID), `iat` (issued at time), and `expiresAt` (token expiration time).",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the managed user for whom to refresh tokens.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that manages the user.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens successfully refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response with new tokens",
                    "value": {
                      "status": "success",
                      "data": {
                        "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.new.access.token",
                        "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.new.refresh.token",
                        "accessTokenExpiresAt": 1700000000,
                        "refreshTokenExpiresAt": 1730000000
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users", "Authentication"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. Frequent refresh attempts for the same user or client may result in temporary blocks.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 100
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Token refresh operations are never cached."
          }
        }
      }
    },
    "/v2/oauth/{clientId}/refresh": {
      "post": {
        "operationId": "OAuthFlowController_refreshTokens",
        "summary": "Refresh managed user tokens using a refresh token",
        "description": "Refreshes an expired access token for a managed user using their refresh token. This endpoint implements a 'refresh token rotation' mechanism, meaning a new refresh token is also issued with each successful refresh. The new access token is valid for 60 minutes and the new refresh token for 1 year. Always store the latest refresh token securely in your database.\n\n**Note**: The JWT token payload (after decoding) contains `clientId` (OAuth client ID), `ownerId` (user ID), `iat` (issued at time), and `expiresAt` (token expiration time).",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client associated with the refresh token.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The refresh token to be used for obtaining new tokens.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenInput"
              },
              "examples": {
                "refresh_token_example": {
                  "summary": "Example request body for token refresh",
                  "value": {
                    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.old.refresh.token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access and refresh tokens successfully issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response with new tokens",
                    "value": {
                      "status": "success",
                      "data": {
                        "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.new.access.token",
                        "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.another.new.refresh.token",
                        "accessTokenExpiresAt": 1700000000,
                        "refreshTokenExpiresAt": 1730000000
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid refresh token or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Invalid refresh token provided."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Managed Users", "Authentication"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited to prevent abuse. Excessive refresh attempts may result in temporary blocks.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Token refresh operations are never cached."
          }
        }
      }
    },
    "/v2/oauth-clients/{clientId}/webhooks": {
      "post": {
        "operationId": "OAuthClientWebhooksController_createOAuthClientWebhook",
        "summary": "Create an OAuth client webhook",
        "description": "Creates a new webhook for the specified OAuth client. Webhooks allow your application to receive real-time notifications about events related to the OAuth client, such as bookings created by managed users. You must define the `subscriberUrl`, `triggers`, and `active` status.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client for which to create the webhook.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The webhook configuration details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookInputDto"
              },
              "examples": {
                "create_webhook_example": {
                  "summary": "Example request to create an OAuth client webhook",
                  "value": {
                    "subscriberUrl": "https://your-app.com/webhook-listener",
                    "triggers": "BOOKING_CREATED",
                    "active": true,
                    "secret": "mywebhooksecret123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example successful creation response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "oAuthClientId": "clsx38nbl0001vkhlwin9fmt0",
                        "subscriberUrl": "https://your-app.com/webhook-listener",
                        "triggers": ["BOOKING_CREATED"],
                        "active": true,
                        "secret": "mywebhooksecret123",
                        "payloadTemplate": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Webhooks", "OAuth Clients"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      },
      "get": {
        "operationId": "OAuthClientWebhooksController_getOAuthClientWebhooks",
        "summary": "Get all OAuth client webhooks",
        "description": "Retrieves a paginated list of webhooks configured for a specific OAuth client. This allows platform customers to review and manage their active webhook integrations.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client for which to retrieve webhooks.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `skip` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `take` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of OAuth client webhooks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhooksOutputResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": 1,
                          "oAuthClientId": "clsx38nbl0001vkhlwin9fmt0",
                          "subscriberUrl": "https://your-app.com/webhook-listener",
                          "triggers": ["BOOKING_CREATED"],
                          "active": true,
                          "secret": "mywebhooksecret123",
                          "payloadTemplate": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests allowed in the current rate limit window.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Webhooks", "OAuth Clients"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing webhook configurations."
          }
        }
      },
      "delete": {
        "operationId": "OAuthClientWebhooksController_deleteAllOAuthClientWebhooks",
        "summary": "Delete all OAuth client webhooks",
        "description": "Deletes all webhooks associated with a specific OAuth client. This action is irreversible and will stop all outgoing webhook notifications for this client.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client for which to delete all webhooks.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "All OAuth client webhooks successfully deleted. The response confirms the deletion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteManyWebhooksOutputResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": "All webhooks deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Webhooks", "OAuth Clients"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      }
    },
    "/v2/oauth-clients/{clientId}/webhooks/{webhookId}": {
      "patch": {
        "operationId": "OAuthClientWebhooksController_updateOAuthClientWebhook",
        "summary": "Update an OAuth client webhook",
        "description": "Updates an existing webhook for a specific OAuth client. You can modify the `subscriberUrl`, `triggers`, `active` status, `payloadTemplate`, or `secret` of the webhook. Only the fields provided in the request body will be updated.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The unique numerical ID of the webhook to update.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "12345"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that owns the webhook.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The webhook configuration details to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookInputDto"
              },
              "examples": {
                "update_webhook_example": {
                  "summary": "Example request to update a webhook",
                  "value": {
                    "active": false,
                    "subscriberUrl": "https://your-app.com/new-webhook-listener",
                    "triggers": "BOOKING_CANCELLED"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook successfully updated. The response returns the updated webhook data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after update",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "oAuthClientId": "clsx38nbl0001vkhlwin9fmt0",
                        "subscriberUrl": "https://your-app.com/new-webhook-listener",
                        "triggers": ["BOOKING_CANCELLED"],
                        "active": false,
                        "secret": "mywebhooksecret123",
                        "payloadTemplate": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Webhooks", "OAuth Clients"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Updates are never cached."
          }
        }
      },
      "get": {
        "operationId": "OAuthClientWebhooksController_getOAuthClientWebhook",
        "summary": "Get a specific OAuth client webhook",
        "description": "Retrieves the details of a single webhook associated with a specific OAuth client, identified by its `webhookId`. This is useful for checking the configuration or status of a particular webhook.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The unique numerical ID of the webhook to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "12345"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that owns the webhook.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the webhook details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "oAuthClientId": "clsx38nbl0001vkhlwin9fmt0",
                        "subscriberUrl": "https://your-app.com/webhook-listener",
                        "triggers": ["BOOKING_CREATED"],
                        "active": true,
                        "secret": "mywebhooksecret123",
                        "payloadTemplate": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Webhooks", "OAuth Clients"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing webhook configurations."
          }
        }
      },
      "delete": {
        "operationId": "OAuthClientWebhooksController_deleteOAuthClientWebhook",
        "summary": "Delete a specific OAuth client webhook",
        "description": "Deletes a specific webhook associated with an OAuth client, identified by its `webhookId`. This action is irreversible.",
        "parameters": [
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The unique numerical ID of the webhook to delete.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "12345"
          },
          {
            "name": "clientId",
            "in": "path",
            "description": "The unique identifier of the OAuth client that owns the webhook.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook successfully deleted. The response returns the data of the deleted webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthClientWebhookOutputResponseDto"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after deletion",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "oAuthClientId": "clsx38nbl0001vkhlwin9fmt0",
                        "subscriberUrl": "https://your-app.com/webhook-listener",
                        "triggers": ["BOOKING_CREATED"],
                        "active": true,
                        "secret": "mywebhooksecret123",
                        "payloadTemplate": "{\"content\":\"A new event has been scheduled\",\"type\":\"{{type}}\",\"name\":\"{{title}}\",\"organizer\":\"{{organizer.name}}\",\"booker\":\"{{attendees.0.name}}\"}"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Webhooks", "OAuth Clients"],
        "security": [
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per OAuth client secret.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes": {
      "get": {
        "operationId": "OrganizationsAttributesController_getOrganizationAttributes",
        "summary": "Get all custom attributes for an organization",
        "description": "Retrieves a paginated list of custom attributes configured for a specific organization. Custom attributes allow organizations to store additional, structured information about their users. This endpoint is typically used by organization administrators to view available attributes.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `skip` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `take` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of organization attributes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationAttributesOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "attr_abc",
                          "teamId": 123,
                          "type": "TEXT",
                          "name": "Department",
                          "slug": "department",
                          "enabled": true,
                          "usersCanEditRelation": true
                        },
                        {
                          "id": "attr_def",
                          "teamId": 123,
                          "type": "SINGLE_SELECT",
                          "name": "Role Level",
                          "slug": "role-level",
                          "enabled": true,
                          "usersCanEditRelation": false
                        }
                      ],
                      "pagination": {
                        "totalItems": 2,
                        "remainingItems": 0,
                        "itemsPerPage": 10,
                        "currentPage": 1,
                        "totalPages": 1,
                        "hasNextPage": false,
                        "hasPreviousPage": false
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potential data sensitivity and freshness requirements."
          }
        }
      },
      "post": {
        "operationId": "OrganizationsAttributesController_createOrganizationAttribute",
        "summary": "Create an organization attribute",
        "description": "Creates a new custom attribute for a specific organization. Attributes can be of type `TEXT`, `NUMBER`, `SINGLE_SELECT`, or `MULTI_SELECT`. For select types, you must provide a list of options. This allows organizations to define custom fields for their users.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization to which the attribute will be added.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The details for the new organization attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationAttributeInput"
              },
              "examples": {
                "create_text_attribute_example": {
                  "summary": "Example request for a text attribute",
                  "value": {
                    "name": "Job Title",
                    "slug": "job-title",
                    "type": "TEXT",
                    "options": [],
                    "enabled": true
                  }
                },
                "create_single_select_attribute_example": {
                  "summary": "Example request for a single-select attribute",
                  "value": {
                    "name": "Team Role",
                    "slug": "team-role",
                    "type": "SINGLE_SELECT",
                    "options": [
                      {
                        "value": "Engineer",
                        "slug": "engineer"
                      },
                      {
                        "value": "Designer",
                        "slug": "designer"
                      }
                    ],
                    "enabled": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization attribute successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationAttributesOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "attr_new_id",
                        "teamId": 123,
                        "type": "TEXT",
                        "name": "Job Title",
                        "slug": "job-title",
                        "enabled": true,
                        "usersCanEditRelation": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict. An attribute with the same slug already exists for this organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Attribute with slug 'job-title' already exists."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/{attributeId}": {
      "get": {
        "operationId": "OrganizationsAttributesController_getOrganizationAttribute",
        "summary": "Get a specific custom attribute by ID",
        "description": "Retrieves the details of a single custom attribute for a given organization, identified by its `attributeId`. This is useful for inspecting the configuration of a specific attribute, including its type and options.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the organization attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleAttributeOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "attr_abc",
                        "teamId": 123,
                        "type": "TEXT",
                        "name": "Department",
                        "slug": "department",
                        "enabled": true,
                        "usersCanEditRelation": true
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potential data sensitivity and freshness requirements."
          }
        }
      },
      "patch": {
        "operationId": "OrganizationsAttributesController_updateOrganizationAttribute",
        "summary": "Update an organization attribute",
        "description": "Updates an existing custom attribute for a specific organization. You can modify its `name`, `slug`, `type`, or `enabled` status. Note that changing the `type` might require careful handling of existing data. Only the fields provided in the request body will be updated.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_abc"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update for the organization attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationAttributeInput"
              },
              "examples": {
                "update_attribute_example": {
                  "summary": "Example request to update an attribute's name and status",
                  "value": {
                    "name": "Updated Job Title",
                    "enabled": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization attribute successfully updated. The response returns the updated attribute data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrganizationAttributesOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after update",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "attr_abc",
                        "teamId": 123,
                        "type": "TEXT",
                        "name": "Updated Job Title",
                        "slug": "job-title",
                        "enabled": false,
                        "usersCanEditRelation": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict. An attribute with the new slug already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Attribute with slug 'existing-slug' already exists."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Updates are never cached."
          }
        }
      },
      "delete": {
        "operationId": "OrganizationsAttributesController_deleteOrganizationAttribute",
        "summary": "Delete an organization attribute",
        "description": "Deletes a specific custom attribute from an organization. This action is irreversible and will remove the attribute from all associated users and data. Ensure you understand the implications before deleting an attribute.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_abc"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attribute successfully deleted. The response returns the data of the deleted attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteOrganizationAttributesOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after deletion",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "attr_abc",
                        "teamId": 123,
                        "type": "TEXT",
                        "name": "Job Title",
                        "slug": "job-title",
                        "enabled": false,
                        "usersCanEditRelation": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/{attributeId}/options": {
      "post": {
        "operationId": "OrganizationsAttributesOptionsController_createOrganizationAttributeOption",
        "summary": "Create an attribute option",
        "description": "Creates a new option for a specific `SINGLE_SELECT` or `MULTI_SELECT` custom attribute within an organization. Each option requires a unique `value` and `slug` within that attribute. This allows you to define the available choices for your select attributes.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute to which the option will be added. Must be a `SINGLE_SELECT` or `MULTI_SELECT` type attribute.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_def"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The value and slug for the new attribute option.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationAttributeOptionInput"
              },
              "examples": {
                "create_option_example": {
                  "summary": "Example request to create an attribute option",
                  "value": {
                    "value": "Manager",
                    "slug": "manager"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute option successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAttributeOptionOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "opt_new_id",
                        "attributeId": "attr_def",
                        "value": "Manager",
                        "slug": "manager"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid attribute type or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Attribute type must be 'SINGLE_SELECT' or 'MULTI_SELECT' to add options."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict. An option with the same slug already exists for this attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Option with slug 'manager' already exists for this attribute."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      },
      "get": {
        "operationId": "OrganizationsAttributesOptionsController_getOrganizationAttributeOptions",
        "summary": "Get all options for an attribute",
        "description": "Retrieves all available options for a specific custom attribute within an organization. This is primarily useful for `SINGLE_SELECT` and `MULTI_SELECT` attribute types to enumerate the choices available for users.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute for which to retrieve options.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_def"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of attribute options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAttributeOptionOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "opt_engineer",
                          "attributeId": "attr_def",
                          "value": "Engineer",
                          "slug": "engineer"
                        },
                        {
                          "id": "opt_designer",
                          "attributeId": "attr_def",
                          "value": "Designer",
                          "slug": "designer"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potential data sensitivity and freshness requirements."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/{attributeId}/options/{optionId}": {
      "delete": {
        "operationId": "OrganizationsAttributesOptionsController_deleteOrganizationAttributeOption",
        "summary": "Delete an attribute option",
        "description": "Deletes a specific option from a custom attribute within an organization. This action is irreversible and will remove the option from any users it was assigned to.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute that owns the option.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_def"
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "The unique identifier (UUID) of the option to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "opt_engineer"
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute option successfully deleted. The response returns the data of the deleted option.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAttributeOptionOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after deletion",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "opt_engineer",
                        "attributeId": "attr_def",
                        "value": "Engineer",
                        "slug": "engineer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      },
      "patch": {
        "operationId": "OrganizationsAttributesOptionsController_updateOrganizationAttributeOption",
        "summary": "Update an attribute option",
        "description": "Updates an existing option for a custom attribute within an organization. You can modify the `value` or `slug` of the option. Only the fields provided in the request body will be updated.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute that owns the option.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_def"
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "The unique identifier (UUID) of the option to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "opt_designer"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update for the attribute option.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationAttributeOptionInput"
              },
              "examples": {
                "update_option_example": {
                  "summary": "Example request to update an attribute option's value",
                  "value": {
                    "value": "Senior Designer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute option successfully updated. The response returns the updated option data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAttributeOptionOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after update",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "opt_designer",
                        "attributeId": "attr_def",
                        "value": "Senior Designer",
                        "slug": "designer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Conflict. An option with the new slug already exists for this attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Option with slug 'manager' already exists for this attribute."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Updates are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/{attributeId}/options/assigned": {
      "get": {
        "operationId": "OrganizationsAttributesOptionsController_getOrganizationAttributeAssignedOptions",
        "summary": "Get all attribute options assigned to users for a given attribute ID",
        "description": "Retrieves all options for a specific custom attribute that have been assigned to users within an organization. This endpoint can be filtered by `assignedOptionIds` and `teamIds` and supports pagination. Useful for seeing which attribute values are currently in use by members.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute to filter assigned options by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "attr_def"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `take` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `skip` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "assignedOptionIds",
            "in": "query",
            "description": "Filter results by specific assigned attribute option IDs. Multiple IDs should be separated by commas (e.g., `?assignedOptionIds=uuid1,uuid2`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "style": "form",
            "explode": false,
            "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeee1eee,aaaaaaaa-bbbb-cccc-dddd-eeeeee2eee"
          },
          {
            "name": "teamIds",
            "in": "query",
            "description": "Filter results by team IDs. Only returns assigned options for users belonging to these teams. Multiple IDs should be separated by commas (e.g., `?teamIds=100,200`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            },
            "style": "form",
            "explode": false,
            "example": "100,200"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the assigned attribute options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAttributeAssignedOptionOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "opt_engineer",
                          "attributeId": "attr_def",
                          "value": "Engineer",
                          "slug": "engineer",
                          "assignedUserIds": [
                            101,
                            105
                          ]
                        },
                        {
                          "id": "opt_manager",
                          "attributeId": "attr_def",
                          "value": "Manager",
                          "slug": "manager",
                          "assignedUserIds": [
                            102
                          ]
                        }
                      ],
                      "pagination": {
                        "totalItems": 2,
                        "remainingItems": 0,
                        "itemsPerPage": 10,
                        "currentPage": 1,
                        "totalPages": 1,
                        "hasNextPage": false,
                        "hasPreviousPage": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potential data sensitivity and freshness requirements."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/slugs/{attributeSlug}/options/assigned": {
      "get": {
        "operationId": "OrganizationsAttributesOptionsController_getOrganizationAttributeAssignedOptionsBySlug",
        "summary": "Get all attribute options assigned to users for a given attribute slug",
        "description": "Retrieves all options for a specific custom attribute (identified by its `attributeSlug`) that have been assigned to users within an organization. This endpoint functions similarly to the `attributeId` version but uses the human-readable slug for convenience. It supports filtering by `assignedOptionIds` and `teamIds` and pagination.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "attributeSlug",
            "in": "path",
            "description": "The unique slug of the attribute to filter assigned options by.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "team-role"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `take` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `skip` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "assignedOptionIds",
            "in": "query",
            "description": "Filter results by specific assigned attribute option IDs. Multiple IDs should be separated by commas (e.g., `?assignedOptionIds=uuid1,uuid2`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "style": "form",
            "explode": false,
            "example": "aaaaaaaa-bbbb-cccc-dddd-eeeeee1eee,aaaaaaaa-bbbb-cccc-dddd-eeeeee2eee"
          },
          {
            "name": "teamIds",
            "in": "query",
            "description": "Filter results by team IDs. Only returns assigned options for users belonging to these teams. Multiple IDs should be separated by commas (e.g., `?teamIds=100,200`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            },
            "style": "form",
            "explode": false,
            "example": "100,200"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the assigned attribute options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllAttributeAssignedOptionOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "opt_engineer",
                          "attributeId": "attr_def",
                          "value": "Engineer",
                          "slug": "engineer",
                          "assignedUserIds": [
                            101,
                            105
                          ]
                        },
                        {
                          "id": "opt_manager",
                          "attributeId": "attr_def",
                          "value": "Manager",
                          "slug": "manager",
                          "assignedUserIds": [
                            102
                          ]
                        }
                      ],
                      "pagination": {
                        "totalItems": 2,
                        "remainingItems": 0,
                        "itemsPerPage": 10,
                        "currentPage": 1,
                        "totalPages": 1,
                        "hasNextPage": false,
                        "hasPreviousPage": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potential data sensitivity and freshness requirements."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/options/{userId}": {
      "post": {
        "operationId": "OrganizationsAttributesOptionsController_assignOrganizationAttributeOptionToUser",
        "summary": "Assign an attribute option to a user",
        "description": "Assigns a specific option of a custom attribute to a user within an organization. This allows you to categorize users based on the attributes defined for your organization. For `SINGLE_SELECT` attributes, assigning a new option will replace any existing assigned option for that attribute for the user. For `MULTI_SELECT` attributes, new options are added.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the user to assign the attribute option to.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The attribute option to assign to the user. You must provide either `attributeOptionId` or `value` (and it will automatically try to find the `attributeOptionId` for that value).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignOrganizationAttributeOptionToUserInput"
              },
              "examples": {
                "assign_option_by_id_example": {
                  "summary": "Example request to assign an option by ID",
                  "value": {
                    "attributeId": "attr_def",
                    "attributeOptionId": "opt_engineer"
                  }
                },
                "assign_option_by_value_example": {
                  "summary": "Example request to assign an option by value (attributeId is required)",
                  "value": {
                    "attributeId": "attr_def",
                    "value": "Manager"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute option successfully assigned to the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignOptionUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "user_attr_assign_id",
                        "memberId": 1234,
                        "attributeOptionId": "opt_engineer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Not Found. Attribute or attribute option not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Attribute option not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Option already assigned or invalid assignment for attribute type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Option already assigned to user or cannot assign multiple options to SINGLE_SELECT attribute."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      },
      "get": {
        "operationId": "OrganizationsAttributesOptionsController_getOrganizationAttributeOptionsForUser",
        "summary": "Get all attribute options assigned to a user",
        "description": "Retrieves all custom attribute options that have been assigned to a specific user within an organization. This provides a complete overview of a user's categorized information based on the organization's custom attributes.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the user to retrieve assigned attribute options for.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the assigned attribute options for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOptionUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "user_attr_assign_id_1",
                          "attributeId": "attr_def",
                          "value": "Engineer",
                          "slug": "engineer"
                        },
                        {
                          "id": "user_attr_assign_id_2",
                          "attributeId": "attr_abc",
                          "value": "Central",
                          "slug": "department-central"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potential data sensitivity and freshness requirements."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/attributes/options/{userId}/{attributeOptionId}": {
      "delete": {
        "operationId": "OrganizationsAttributesOptionsController_unassignOrganizationAttributeOptionFromUser",
        "summary": "Unassign an attribute option from a user",
        "description": "Removes a specific attribute option assignment from a user within an organization. This is typically used to remove a user's categorization or role based on the custom attributes.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique numerical ID of the user from whom to unassign the attribute option.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 101
          },
          {
            "name": "attributeOptionId",
            "in": "path",
            "description": "The unique identifier (UUID) of the attribute option to unassign.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "opt_engineer"
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute option successfully unassigned from the user. The response returns the data of the unassigned option.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnassignOptionUserOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after unassignment",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "user_attr_assign_id_1",
                        "memberId": 1234,
                        "attributeOptionId": "opt_engineer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Not Found. Attribute option or user assignment not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "Attribute option assignment not found for this user."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Attributes / Options"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per API key or managed user access token.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/bookings": {
      "get": {
        "operationId": "OrganizationsBookingsController_getAllOrgTeamBookings",
        "summary": "Get all organization bookings",
        "description": "Retrieves a paginated list of all bookings across an entire organization. This endpoint provides comprehensive filtering options, allowing you to narrow down results by booking status, attendee information, event types, teams, and various date ranges (start, end, creation, update times). Results can also be sorted and paginated.\n\n**Authentication**: This endpoint supports both regular API keys (for organization admins) and OAuth client credentials (for platform customers).",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`) or a managed user access token.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header with a managed user access token.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter bookings by one or more statuses. Multiple statuses should be separated by commas (e.g., `?status=upcoming,past`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["upcoming", "recurring", "past", "cancelled", "unconfirmed"]
              }
            },
            "style": "form",
            "explode": false,
            "example": "upcoming,past"
          },
          {
            "name": "attendeeEmail",
            "in": "query",
            "description": "Filter bookings by the attendee's exact email address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "example": "example@domain.com"
          },
          {
            "name": "attendeeName",
            "in": "query",
            "description": "Filter bookings by the attendee's name (partial match).",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John Doe"
          },
          {
            "name": "bookingUid",
            "in": "query",
            "description": "Filter bookings by a specific booking UID.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2NtaeaVcKfpmSZ4CthFdfk"
          },
          {
            "name": "eventTypeIds",
            "in": "query",
            "description": "Filter bookings by one or more event type IDs belonging to users within the organization. Multiple IDs should be separated by commas (e.g., `?eventTypeIds=100,200`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            },
            "style": "form",
            "explode": false,
            "example": "100,200"
          },
          {
            "name": "eventTypeId",
            "in": "query",
            "description": "Filter bookings by a single event type ID belonging to a user within the organization.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 100
          },
          {
            "name": "teamsIds",
            "in": "query",
            "description": "Filter bookings by one or more team IDs that users are part of. Multiple IDs should be separated by commas (e.g., `?teamIds=50,60`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            },
            "style": "form",
            "explode": false,
            "example": "50,60"
          },
          {
            "name": "teamId",
            "in": "query",
            "description": "Filter bookings by a single team ID that users are part of.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 50
          },
          {
            "name": "afterStart",
            "in": "query",
            "description": "Filter bookings whose start time is after this date string (ISO 8601, UTC). E.g., `2025-03-07T10:00:00.000Z` or `2025-03-07` (defaults to start of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2025-03-07T10:00:00.000Z"
          },
          {
            "name": "beforeEnd",
            "in": "query",
            "description": "Filter bookings whose end time is before this date string (ISO 8601, UTC). E.g., `2025-03-07T11:00:00.000Z` or `2025-03-07` (defaults to end of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2025-03-07T11:00:00.000Z"
          },
          {
            "name": "afterCreatedAt",
            "in": "query",
            "description": "Filter bookings that have been created after this date string (ISO 8601, UTC). E.g., `2025-03-07T10:00:00.000Z` or `2025-03-07` (defaults to start of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2025-03-07T10:00:00.000Z"
          },
          {
            "name": "beforeCreatedAt",
            "in": "query",
            "description": "Filter bookings that have been created before this date string (ISO 8601, UTC). E.g., `2025-03-14T11:00:00.000Z` or `2025-03-14` (defaults to end of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2025-03-14T11:00:00.000Z"
          },
          {
            "name": "afterUpdatedAt",
            "in": "query",
            "description": "Filter bookings that have been updated after this date string (ISO 8601, UTC). E.g., `2025-03-07T10:00:00.000Z` or `2025-03-07` (defaults to start of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2025-03-07T10:00:00.000Z"
          },
          {
            "name": "beforeUpdatedAt",
            "in": "query",
            "description": "Filter bookings that have been updated before this date string (ISO 8601, UTC). E.g., `2025-03-14T11:00:00.000Z` or `2025-03-14` (defaults to end of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2025-03-14T11:00:00.000Z"
          },
          {
            "name": "sortStart",
            "in": "query",
            "description": "Sort results by their start time in ascending (`asc`) or descending (`desc`) order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "example": "asc"
          },
          {
            "name": "sortEnd",
            "in": "query",
            "description": "Sort results by their end time in ascending (`asc`) or descending (`desc`) order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "example": "desc"
          },
          {
            "name": "sortCreated",
            "in": "query",
            "description": "Sort results by their creation time (when booking was made) in ascending (`asc`) or descending (`desc`) order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "example": "desc"
          },
          {
            "name": "sortUpdatedAt",
            "in": "query",
            "description": "Sort results by their updated time (e.g., when booking status changes) in ascending (`asc`) or descending (`desc`) order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "example": "asc"
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "Filter bookings by IDs of specific users within your organization. Multiple IDs should be separated by commas (e.g., `?userIds=100,200`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            },
            "style": "form",
            "explode": false,
            "example": "100,200"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization to retrieve bookings for.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved organization bookings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingsOutput_2024_08_13"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response for organization bookings",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": 1,
                          "uid": "booking_org_abc",
                          "title": "Org Team Sync",
                          "description": "Weekly sync meeting for the sales team.",
                          "hosts": [
                            {
                              "id": 10,
                              "name": "Alice Smith",
                              "email": "alice@org.com",
                              "username": "alice",
                              "timeZone": "Europe/London"
                            }
                          ],
                          "status": "upcoming",
                          "cancellationReason": null,
                          "cancelledByEmail": null,
                          "reschedulingReason": null,
                          "rescheduledByEmail": null,
                          "rescheduledFromUid": null,
                          "start": "2024-09-01T10:00:00Z",
                          "end": "2024-09-01T11:00:00Z",
                          "duration": 60,
                          "eventTypeId": 201,
                          "eventType": {
                            "id": 201,
                            "slug": "team-sync"
                          },
                          "location": "Google Meet: https://meet.google.com/abc-def-ghi",
                          "absentHost": false,
                          "createdAt": "2024-08-20T09:00:00Z",
                          "updatedAt": "2024-08-20T09:00:00Z",
                          "metadata": {},
                          "rating": null,
                          "icsUid": "ics_org_abc",
                          "attendees": [
                            {
                              "name": "Bob Johnson",
                              "email": "bob@example.com",
                              "timeZone": "America/New_York",
                              "phoneNumber": null,
                              "language": "en",
                              "absent": false,
                              "seatUid": null,
                              "bookingFieldsResponses": {}
                            }
                          ],
                          "guests": [],
                          "bookingFieldsResponses": {}
                        }
                      ],
                      "pagination": {
                        "totalItems": 1,
                        "remainingItems": 0,
                        "itemsPerPage": 100,
                        "currentPage": 1,
                        "totalPages": 1,
                        "hasNextPage": false,
                        "hasPreviousPage": false
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Bookings"],
        "security": [
          {
            "api_key": [],
            "managed_user_access_token": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method (API key or OAuth client secret).",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing booking data."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/delegation-credentials": {
      "post": {
        "operationId": "OrganizationsDelegationCredentialController_createDelegationCredential",
        "summary": "Save delegation credentials for your organization",
        "description": "Configures delegation credentials for external calendar services (e.g., Google Service Account, Microsoft Service Account) within an organization. This allows the organization to manage calendar events on behalf of users without requiring individual user authorization for each calendar. Requires the appropriate service account keys.\n\n**Authentication**: Supports both standard API keys and OAuth client credentials.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization to which the delegation credentials will be linked.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The delegation credential details, including the service account key for Google or Microsoft.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDelegationCredentialInput"
              },
              "examples": {
                "create_google_delegation_example": {
                  "summary": "Example request for Google Service Account delegation",
                  "value": {
                    "workspacePlatformSlug": "google_calendar",
                    "domain": "example.com",
                    "serviceAccountKey": [
                      {
                        "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
                        "client_email": "service-account@your-project.iam.gserviceaccount.com",
                        "client_id": "1234567890abcdef"
                      }
                    ]
                  }
                },
                "create_microsoft_delegation_example": {
                  "summary": "Example request for Microsoft Service Account delegation",
                  "value": {
                    "workspacePlatformSlug": "office365_calendar",
                    "domain": "yourcompany.onmicrosoft.com",
                    "serviceAccountKey": [
                      {
                        "tenantId": "tenant-id-guid",
                        "clientId": "client-id-guid",
                        "clientSecret": "client-secret-string"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Delegation credentials successfully saved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDelegationCredentialOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example successful creation response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "delegation_cred_id_1",
                        "enabled": true,
                        "domain": "example.com",
                        "organizationId": 123,
                        "workspacePlatform": {
                          "name": "Google Calendar",
                          "slug": "google_calendar"
                        },
                        "createdAt": "2024-05-20T10:00:00Z",
                        "updatedAt": "2024-05-20T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Delegation Credentials"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/delegation-credentials/{credentialId}": {
      "patch": {
        "operationId": "OrganizationsDelegationCredentialController_updateDelegationCredential",
        "summary": "Update delegation credentials of your organization",
        "description": "Updates existing delegation credentials for an organization. This can be used to re-enable/disable credentials or update the service account key if it has changed. Only the provided fields will be updated.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "The unique identifier (UUID) of the delegation credential to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "delegation_cred_id_1"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update for the delegation credential. All fields are optional.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDelegationCredentialInput"
              },
              "examples": {
                "update_credentials_example": {
                  "summary": "Example request to disable delegation credentials",
                  "value": {
                    "enabled": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delegation credentials successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDelegationCredentialOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after update",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": "delegation_cred_id_1",
                        "enabled": false,
                        "domain": "example.com",
                        "organizationId": 123,
                        "workspacePlatform": {
                          "name": "Google Calendar",
                          "slug": "google_calendar"
                        },
                        "createdAt": "2024-05-20T10:00:00Z",
                        "updatedAt": "2024-05-20T10:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Delegation Credentials"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Updates are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/memberships": {
      "get": {
        "operationId": "OrganizationsMembershipsController_getAllMemberships",
        "summary": "Get all organization memberships",
        "description": "Retrieves a paginated list of all user memberships within a specific organization. This endpoint is useful for organization administrators to view which users are part of their organization and their assigned roles.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization to retrieve memberships for.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `skip` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `take` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of organization memberships.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllOrgMemberships"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "userId": 101,
                        "teamId": null,
                        "accepted": true,
                        "role": "ADMIN",
                        "disableImpersonation": false,
                        "user": {
                          "avatarUrl": "https://cal.com/avatar/user1.png",
                          "username": "john-doe",
                          "name": "John Doe",
                          "email": "john.doe@example.com",
                          "bio": "Software Engineer",
                          "metadata": {}
                        },
                        "attributes": []
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Memberships"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing membership data."
          }
        }
      },
      "post": {
        "operationId": "OrganizationsMembershipsController_createMembership",
        "summary": "Create an organization membership",
        "description": "Adds an existing user to an organization as a new member. You can specify the user's ID and their role within the organization (`MEMBER`, `ADMIN`, `OWNER`). For platform customers, managed users should typically be assigned the `MEMBER` role. Optionally, you can set `accepted` to `true` to bypass the invitation process.\n\n**Authentication**: Supports both standard API keys and OAuth client credentials.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization to add the membership to.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The details for the new organization membership.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgMembershipDto"
              },
              "examples": {
                "create_membership_example": {
                  "summary": "Example request to add a user as a member",
                  "value": {
                    "userId": 105,
                    "role": "MEMBER",
                    "accepted": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization membership successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrgMembershipOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example successful creation response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 2,
                        "userId": 105,
                        "teamId": null,
                        "accepted": true,
                        "role": "MEMBER",
                        "disableImpersonation": false,
                        "user": {
                          "avatarUrl": null,
                          "username": "new-user-5",
                          "name": "New User Five",
                          "email": "user5@example.com",
                          "bio": null,
                          "metadata": {}
                        },
                        "attributes": []
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Not Found. User or organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User with ID '105' not found."
                }
              }
            }
          },
          "409": {
            "description": "Conflict. User is already a member of the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "status": "error",
                  "message": "User '105' is already a member of organization '123'."
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Memberships"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Creation operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/memberships/{membershipId}": {
      "get": {
        "operationId": "OrganizationsMembershipsController_getOrgMembership",
        "summary": "Get a specific organization membership by ID",
        "description": "Retrieves the details of a single user membership within an organization, identified by its `membershipId`. This provides detailed information about a user's role and status in the organization.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "The unique numerical ID of the membership to retrieve.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the organization membership.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrgMembership"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "userId": 101,
                        "teamId": null,
                        "accepted": true,
                        "role": "ADMIN",
                        "disableImpersonation": false,
                        "user": {
                          "avatarUrl": "https://cal.com/avatar/user1.png",
                          "username": "john-doe",
                          "name": "John Doe",
                          "email": "john.doe@example.com",
                          "bio": "Software Engineer",
                          "metadata": {}
                        },
                        "attributes": []
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Cache-Control": {
                "description": "Indicates that the response should not be cached. `no-cache, private`",
                "schema": {
                  "type": "string"
                },
                "example": "no-cache, private"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Memberships"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 60
              },
              {
                "period": "hour",
                "requests": 3600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Responses are not cached at the server level due to potentially sensitive and frequently changing membership data."
          }
        }
      },
      "delete": {
        "operationId": "OrganizationsMembershipsController_deleteMembership",
        "summary": "Delete an organization membership",
        "description": "Removes a user's membership from a specific organization, identified by its `membershipId`. This action will remove the user from the organization and revoke their access to organization-specific resources.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "The unique numerical ID of the membership to delete.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Organization membership successfully deleted. The response returns the data of the deleted membership.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteOrgMembership"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after deletion",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "userId": 101,
                        "teamId": null,
                        "accepted": false,
                        "role": "MEMBER",
                        "disableImpersonation": false,
                        "user": {
                          "avatarUrl": "https://cal.com/avatar/user1.png",
                          "username": "john-doe",
                          "name": "John Doe",
                          "email": "john.doe@example.com",
                          "bio": "Software Engineer",
                          "metadata": {}
                        },
                        "attributes": []
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Memberships"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 5
              },
              {
                "period": "hour",
                "requests": 300
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Deletion operations are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/memberships/{membershipId}": {
      "patch": {
        "operationId": "OrganizationsMembershipsController_updateMembership",
        "summary": "Update an organization membership",
        "description": "Updates a specific user's membership details within an organization, identified by its `membershipId`. You can modify whether the membership is `accepted`, the user's `role` within the organization, or their `disableImpersonation` status.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`). For non-platform customers.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "x-cal-secret-key",
            "in": "header",
            "description": "OAuth client secret key. Required for platform customers when not using `Authorization` header.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "example": "your_oauth_client_secret"
          },
          {
            "name": "x-cal-client-id",
            "in": "header",
            "description": "OAuth client ID. Used for platform customers to identify the OAuth client. Required when using `x-cal-secret-key`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "clsx38nbl0001vkhlwin9fmt0"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "The unique numerical ID of the membership to update.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update for the organization membership. All fields are optional.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgMembershipDto"
              },
              "examples": {
                "update_membership_example": {
                  "summary": "Example request to update a membership role",
                  "value": {
                    "role": "ADMIN"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization membership successfully updated. The response returns the updated membership data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrgMembership"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response after update",
                    "value": {
                      "status": "success",
                      "data": {
                        "id": 1,
                        "userId": 101,
                        "teamId": null,
                        "accepted": true,
                        "role": "ADMIN",
                        "disableImpersonation": false,
                        "user": {
                          "avatarUrl": "https://cal.com/avatar/user1.png",
                          "username": "john-doe",
                          "name": "John Doe",
                          "email": "john.doe@example.com",
                          "bio": "Software Engineer",
                          "metadata": {}
                        },
                        "attributes": []
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "tags": ["Organizations / Memberships"],
        "security": [
          {
            "api_key": []
          },
          {
            "oauth_client_secret": [],
            "oauth_client_id": []
          }
        ],
        "x-server-conversion-info": {
          "rate_limiting": {
            "description": "This endpoint is rate-limited. General rate limits apply per authentication method.",
            "limits": [
              {
                "period": "minute",
                "requests": 10
              },
              {
                "period": "hour",
                "requests": 600
              }
            ]
          },
          "response_caching": {
            "strategy": "No-Cache",
            "details": "Updates are never cached."
          }
        }
      }
    },
    "/v2/organizations/{orgId}/routing-forms": {
      "get": {
        "operationId": "OrganizationsRoutingFormsController_getOrganizationRoutingForms",
        "summary": "Get organization routing forms",
        "description": "Retrieves a paginated list of routing forms configured at the organization level. Routing forms allow you to direct incoming booking requests to the most appropriate team member or event type based on user responses. This endpoint supports extensive filtering by creation/update dates and team IDs, as well as sorting.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "API Key authentication. Value must be `Bearer <token>` where `<token>` is an API key prefixed with `cal_` (e.g., `Bearer cal_live_xxxxxxxxxxxxxx`).",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bearer cal_live_xxxxxxxxxxxxxx"
          },
          {
            "name": "orgId",
            "in": "path",
            "description": "The unique numerical ID of the organization to retrieve routing forms for.",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 1
            },
            "example": 123
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip before starting to collect the result set. Use with `take` for pagination. Default is 0.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            "example": 0
          },
          {
            "name": "take",
            "in": "query",
            "description": "The maximum number of items to return per page. Use with `skip` for pagination. Default is 100.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "example": 10
          },
          {
            "name": "sortCreatedAt",
            "in": "query",
            "description": "Sort results by their creation time in ascending (`asc`) or descending (`desc`) order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "example": "desc"
          },
          {
            "name": "sortUpdatedAt",
            "in": "query",
            "description": "Sort results by their update time in ascending (`asc`) or descending (`desc`) order.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            },
            "example": "desc"
          },
          {
            "name": "afterCreatedAt",
            "in": "query",
            "description": "Filter by forms created after this date (ISO 8601, UTC). E.g., `2024-03-07T10:00:00.000Z` or `2024-03-07` (defaults to start of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-03-07T10:00:00.000Z"
          },
          {
            "name": "beforeCreatedAt",
            "in": "query",
            "description": "Filter by forms created before this date (ISO 8601, UTC). E.g., `2024-03-14T11:00:00.000Z` or `2024-03-14` (defaults to end of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-03-14T11:00:00.000Z"
          },
          {
            "name": "afterUpdatedAt",
            "in": "query",
            "description": "Filter by forms updated after this date (ISO 8601, UTC). E.g., `2024-03-07T10:00:00.000Z` or `2024-03-07` (defaults to start of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-03-07T10:00:00.000Z"
          },
          {
            "name": "beforeUpdatedAt",
            "in": "query",
            "description": "Filter by forms updated before this date (ISO 8601, UTC). E.g., `2024-03-14T11:00:00.000Z` or `2024-03-14` (defaults to end of day).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2024-03-14T11:00:00.000Z"
          },
          {
            "name": "routedToBookingUid",
            "in": "query",
            "description": "Filter routing forms that have responses routed to a specific booking UID.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "booking_uid_xyz"
          },
          {
            "name": "teamIds",
            "in": "query",
            "description": "Filter routing forms associated with specific team IDs. Multiple IDs should be separated by commas (e.g., `?teamIds=100,200`).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            },
            "style": "form",
            "explode": false,
            "example": "100,200"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved organization routing forms.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRoutingFormsOutput"
                },
                "examples": {
                  "success_response": {
                    "summary": "Example success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "id": "form_org_1",
                          "name": "Sales Lead Routing",
                          "description": "Routes new sales leads to the correct sales representative.",
                          "position": 0,
                          "createdAt": "2024-03-28T10:00:00.000Z",
                          "updatedAt": "2024-03-28T10:00:00.000Z",
                          "userId": 2313,
                          "team